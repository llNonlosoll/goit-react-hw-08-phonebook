{"version":3,"file":"static/js/837.a509a1ab.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","hooks/useContacts.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/filter/selectors.js","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectIsLoading = state => state.contacts.loading;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { useSelector } from 'react-redux';\nimport { selectIsLoading, selectAllContacts } from 'redux/contacts/selectors';\n\nexport const useContacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const allContacts = useSelector(selectAllContacts);\n\n  return {\n    isLoading,\n    allContacts,\n  };\n};\n","import styled from 'styled-components';\n\nexport const ContactFormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  max-width: 550px;\n\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 10px;\n  padding: 10px;\n\n  border: 1px solid #f5fc69;\n  border-radius: 4px;\n`;\n\nexport const ContactFormTextStyled = styled.p`\n  margin-top: 0;\n  margin-bottom: 10px;\n  text-align: center;\n\n  font-size: 22px;\n  color: #f5fc69;\n`;\n\nexport const ContactFormLabelStyled = styled.label`\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 10px;\n\n  font-size: 22px;\n  color: #f5fc69;\n`;\n\nexport const ContactFormInputStyled = styled.input`\n  font-size: 22px;\n\n  background-color: transparent;\n\n  border: 1px solid #f5fc69;\n  border-radius: 4px;\n\n  color: #f5fc69;\n`;\n\nexport const ContactFormButtonStyled = styled.button`\n  font-size: 22px;\n  color: #f5fc69;\n\n  background-color: transparent;\n\n  border: 1px solid #f5fc69;\n  border-radius: 4px;\n\n  cursor: pointer;\n\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #111111;\n    background-color: #f5fc69;\n  }\n`;\n","// Redux's useDispatch hook\nimport { useDispatch } from 'react-redux';\n// Custom hook for accessing contacts\nimport { useContacts } from 'hooks/useContacts';\n// operation for adding contacts\nimport { addContact } from 'redux/contacts/operations';\n// Styled components for the ContactForm component\nimport {\n  ContactFormStyled,\n  ContactFormTextStyled,\n  ContactFormLabelStyled,\n  ContactFormInputStyled,\n  ContactFormButtonStyled,\n} from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  // Redux's useDispatch hook\n  const dispatch = useDispatch();\n\n  // Custom hook for accessing contacts from the Redux store\n  const { allContacts } = useContacts();\n\n  // handleSubmit function\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    const isInContacts = allContacts.some(\n      ({ name }) =>\n        name.toLowerCase() === form.elements.name.value.toLowerCase()\n    );\n\n    if (isInContacts) {\n      alert(`${form.elements.name.value} is already in contacts`);\n      return;\n    }\n\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    // Dispatch the addContact action\n    dispatch(addContact({ name, number }));\n\n    // Form reset\n    form.reset();\n  };\n\n  return (\n    <ContactFormStyled onSubmit={handleSubmit}>\n      <ContactFormTextStyled>\n        Add Contact to your Phonebook\n      </ContactFormTextStyled>\n      <ContactFormLabelStyled htmlFor=\"name\">\n        Name\n        <ContactFormInputStyled\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </ContactFormLabelStyled>\n      <ContactFormLabelStyled htmlFor=\"number\">\n        Number\n        <ContactFormInputStyled\n          id=\"number\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </ContactFormLabelStyled>\n      <ContactFormButtonStyled type=\"submit\">\n        Add Contact\n      </ContactFormButtonStyled>\n    </ContactFormStyled>\n  );\n};\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","// import createSelector function for memoization\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport { selectAllContacts } from 'redux/contacts/selectors';\n\nexport const selectFilter = state => state.filter;\n\n// selector with memoization to filter the contacts list\nexport const selectFilteredContacts = createSelector(\n  [selectAllContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) => {\n      const normalizedName = name.toLowerCase();\n      return normalizedName.includes(normalizedFilter);\n    });\n  }\n);\n","import styled from 'styled-components';\n\nexport const ContactContainerStyled = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  color: #f5fc69;\n`;\n\nexport const ContactTextContainerStyled = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const ContactTextStyled = styled.p`\n  margin-top: 0;\n  margin-bottom: 0;\n\n  font-size: 22px;\n  color: #f5fc69;\n`;\n\nexport const ContactButtonContainerStyled = styled.div`\n  display: flex;\n  gap: 10px;\n`;\n\nexport const ContactButtonStyled = styled.button`\n  width: 100px;\n  height: 30px;\n\n  font-size: 20px;\n  color: #f5fc69;\n\n  background-color: transparent;\n\n  border: 1px solid #f5fc69;\n  border-radius: 4px;\n\n  cursor: pointer;\n\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #111111;\n    background-color: #f5fc69;\n  }\n`;\n\nexport const EditContactFormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  gap: 5px;\n\n  margin-top: 10px;\n  padding: 10px;\n`;\n\nexport const EditContactFormLabelStyled = styled.label`\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 10px;\n\n  font-size: 22px;\n  color: #f5fc69;\n`;\n\nexport const EditContactFormInputStyled = styled.input`\n  font-size: 22px;\n\n  background-color: transparent;\n\n  border: 1px solid #f5fc69;\n  border-radius: 4px;\n\n  color: #f5fc69;\n`;\n\nexport const EditContactButtonContainer = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n`;\n","// React's useState hook\nimport { useState } from 'react';\n// Redux's useDispatch hook\nimport { useDispatch } from 'react-redux';\n// Custom hook for accessing contacts\nimport { useContacts } from 'hooks/useContacts';\n// operations for deleting and editing contacts\nimport { deleteContact, editContact } from 'redux/contacts/operations';\n// Styled components for the Contact component\nimport {\n  ContactContainerStyled,\n  ContactTextContainerStyled,\n  ContactTextStyled,\n  ContactButtonContainerStyled,\n  ContactButtonStyled,\n  EditContactFormStyled,\n  EditContactFormLabelStyled,\n  EditContactFormInputStyled,\n  EditContactButtonContainer,\n} from './Contact.styled';\n\nexport const Contact = ({ id, name, number }) => {\n  // State for controlling the visibility of the edit form\n  const [formVisible, setFormVisible] = useState(false);\n\n  // Redux's useDispatch hook\n  const dispatch = useDispatch();\n\n  // Custom hook for accessing contacts from the Redux store\n  const { allContacts } = useContacts();\n\n  // Dispatch the deleteContact action\n  const handleContactDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  // EditContact function\n  const handleContactEdit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    const isInContacts = allContacts.some(\n      ({ name }) =>\n        name.toLowerCase() === form.elements.name.value.toLowerCase()\n    );\n\n    if (isInContacts) {\n      alert(`${form.elements.name.value} is already in contacts`);\n      return;\n    }\n\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    // Dispatch the editContact action\n    dispatch(editContact({ id, name, number }));\n\n    // Form reset\n    form.reset();\n\n    // Toggle the visibility of the edit form\n    setFormVisible(!formVisible);\n  };\n\n  // Toggle the visibility of the edit form\n  const handleEditFormVisible = () => {\n    setFormVisible(!formVisible);\n  };\n\n  return (\n    <>\n      <ContactContainerStyled>\n        <ContactTextContainerStyled>\n          <ContactTextStyled>{name}: </ContactTextStyled>\n          <ContactTextStyled>{number}</ContactTextStyled>\n        </ContactTextContainerStyled>\n        {!formVisible && (\n          <ContactButtonContainerStyled>\n            <ContactButtonStyled\n              type=\"button\"\n              name=\"edit\"\n              onClick={() => handleEditFormVisible(id)}\n            >\n              Edit\n            </ContactButtonStyled>\n            <ContactButtonStyled\n              type=\"button\"\n              name=\"delete\"\n              onClick={() => handleContactDelete(id)}\n            >\n              Delete\n            </ContactButtonStyled>\n          </ContactButtonContainerStyled>\n        )}\n      </ContactContainerStyled>\n      {formVisible && (\n        <EditContactFormStyled onSubmit={handleContactEdit}>\n          <EditContactFormLabelStyled htmlFor=\"name\">\n            Name\n            <EditContactFormInputStyled\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </EditContactFormLabelStyled>\n          <EditContactFormLabelStyled htmlFor=\"number\">\n            Number\n            <EditContactFormInputStyled\n              id=\"number\"\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </EditContactFormLabelStyled>\n          <EditContactButtonContainer>\n            <ContactButtonStyled\n              type=\"button\"\n              name=\"cancel\"\n              onClick={() => handleEditFormVisible(id)}\n            >\n              Cancel\n            </ContactButtonStyled>\n            <ContactButtonStyled type=\"submit\">Edit</ContactButtonStyled>\n          </EditContactButtonContainer>\n        </EditContactFormStyled>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactsListStyled = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  max-width: 550px;\n\n  margin-left: auto;\n  margin-right: auto;\n  padding: 10px;\n\n  border: 1px solid #f5fc69;\n  border-radius: 4px;\n\n  list-style: none;\n`;\n\nexport const ContactsListItemStyled = styled.li`\n  padding: 5px;\n\n  backdrop-filter: blur(10px);\n\n  border: 1px solid #f5fc69;\n  border-radius: 4px;\n`;\n","// Redux's useSelector hook for accessing state\nimport { useSelector } from 'react-redux';\n// Selector for retrieving filtered contacts\nimport { selectFilteredContacts } from 'redux/filter/selectors';\n// Contact component\nimport { Contact } from 'components/Contact/Contact';\n// Styled components for the ContactsList component\nimport {\n  ContactsListStyled,\n  ContactsListItemStyled,\n} from './ContactsList.styled';\n\nexport const ContactsList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ContactsListStyled>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactsListItemStyled key={id}>\n          <Contact id={id} name={name} number={number}></Contact>\n        </ContactsListItemStyled>\n      ))}\n    </ContactsListStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterContainerStyled = styled.div`\n  display: flex;\n  justify-content: center;\n\n  max-width: 550px;\n\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 10px;\n`;\n\nexport const FilterLabelStyled = styled.label`\n  display: flex;\n  gap: 10px;\n\n  font-size: 22px;\n  color: #f5fc69;\n`;\n\nexport const FilterInputStyled = styled.input`\n  font-size: 22px;\n\n  background-color: transparent;\n\n  border: 1px solid #f5fc69;\n  border-radius: 4px;\n\n  color: #f5fc69;\n`;\n","// Redux's useSelector and useDispatch hooks for accessing state and dispatching actions\nimport { useSelector, useDispatch } from 'react-redux';\n// Action creator for setting the filter\nimport { setFilter } from 'redux/filter/filterSlice';\n// Selector for retrieving the filter value\nimport { selectFilter } from 'redux/filter/selectors';\n// Styled components for the Filter component\nimport {\n  FilterContainerStyled,\n  FilterLabelStyled,\n  FilterInputStyled,\n} from './Filter.styled';\n\nexport const Filter = () => {\n  // Retrieve the filter value from the Redux store\n  const filter = useSelector(selectFilter);\n\n  // Redux's useDispatch hook\n  const dispatch = useDispatch();\n\n  // Dispatch the setFilter action to update the filter value\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <FilterContainerStyled>\n      <FilterLabelStyled htmlFor=\"filter\">\n        Find contacts by name\n        <FilterInputStyled\n          id=\"filter\"\n          type=\"text\"\n          name=\"filter\"\n          onChange={handleFilterChange}\n          value={filter}\n        />\n      </FilterLabelStyled>\n    </FilterContainerStyled>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useContacts } from 'hooks/useContacts';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const { allContacts, isLoading } = useContacts();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      {allContacts.length > 0 && (\n        <>\n          {' '}\n          <Filter />\n          <ContactsList />\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["selectIsLoading","state","contacts","loading","selectAllContacts","items","useContacts","isLoading","useSelector","allContacts","ContactFormStyled","styled","ContactFormTextStyled","ContactFormLabelStyled","ContactFormInputStyled","ContactFormButtonStyled","ContactForm","dispatch","useDispatch","onSubmit","event","preventDefault","form","target","some","name","toLowerCase","elements","value","alert","number","addContact","reset","htmlFor","id","type","pattern","title","required","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectFilter","filter","selectFilteredContacts","normalizedFilter","includes","ContactContainerStyled","ContactTextContainerStyled","ContactTextStyled","ContactButtonContainerStyled","ContactButtonStyled","EditContactFormStyled","EditContactFormLabelStyled","EditContactFormInputStyled","EditContactButtonContainer","Contact","useState","formVisible","setFormVisible","handleEditFormVisible","onClick","deleteContact","handleContactDelete","editContact","ContactsListStyled","ContactsListItemStyled","ContactsList","filteredContacts","FilterContainerStyled","FilterLabelStyled","FilterInputStyled","Filter","onChange","setFilter","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}